pipeline {
    agent any
    
    tools {
        jdk 'jdk9_update00'
        maven 'mvn_363'
    }


    environment {

        NEXUS_VERSION =  "nexus2"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "repository-example"
        NEXUS_CREDENTIAL_ID = "nexus-credentials"

    }
    stages {

        stage('Clean & package') {
            steps {
                sh "java -version"
                sh "cd 14-maven/helloworld/ && mvn clean package"
            }
        }

    /*
        stage('SonarQube Analysis') {
            steps {
                sh "cd 14-maven/helloworld/  && mvn sonar:sonar"
            }
        }
        
     
        
        stage('Sonarqube qualityGate') {
       
            steps {
                
                script {

                    withCredentials([string(credentialsId: 'sonarqubeToken', variable: 'SECRET')]) { //set SECRET with the credential content

                        def scannerHome = tool 'sonarqubeScanner'
                    
                    
                        withSonarQubeEnv('sonarqubeServer') {
                            sh "cd 14-maven/helloworld/ && ${scannerHome}/bin/sonar-scanner \
                                                        -Dsonar.projectKey=com.xavki:helloworld-app \
                                                        -Dsonar.sources=. \
                                                        -Dsonar.host.url=http://localhost:9000 \
                                                        -Dsonar.login=${SECRET}"
                            
                        }   
                        
                        timeout(time: 10, unit: 'MINUTES') {
                                waitForQualityGate abortPipeline: true
                        }

                    }

                }
            }
        }
    */

        stage('Tests SoapUI') {
            steps {
                sh "/opt/SmartBear/SoapUI-5.6.0/bin/testrunner.sh -r 14-maven/helloworld/tests/soapui/Project1-soapui-project.xml"
            }
        }


        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "${env.WORKSPACE}/14-maven/helloworld/pom.xml";
                    filesByGlob = findFiles(glob: "**/target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "${env.WORKSPACE}/14-maven/helloworld/pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}
